generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String  @id @default(uuid())
  clerkUserId String  @unique
  email       String  @unique
  name        String?
  imageUrl    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  industryId String?
  industry   IndustryInsights? @relation(fields: [industryId], references: [id])

  bio        String?
  experience Int?
  skills     String[]

  assessments Assessments[] // Fixed typo
  resume      Resume?
  coverLetter CoverLetter[]
}

model Assessments {
  id String @id @default(cuid())

  quizScore      Float
  questions      Json[]
  category       String
  improvementTip String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt()

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Resume {
  id        String   @id @default(cuid())
  content   String
  ataScore  Float?
  feedback  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model CoverLetter {
  id             String   @id @default(cuid())
  content        String
  jobDescription String?
  companyName    String
  jobTitle       String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt()

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@index([userId])
}

model IndustryInsights {
  id          String @id @default(cuid())
  industry    String @unique
  users       User[] // Corrected one-to-many relation
  salaryRange Json[]

  growthRate  Float
  demandLevel DemandLevel
  topSkills   String[]

  marketOutlook MarketOutlook
  keyTrends     String[]

  recommendedSkills String[]
  lastUpdated       DateTime @default(now())
  nextUpdate        DateTime // Consider setting a default update interval

  @@index([industry])
}

enum DemandLevel {
  High
  Medium
  Low
}

enum MarketOutlook {
  POSITIVE
  NEUTRAL
  NEGATIVE
}
